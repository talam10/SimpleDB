Lab 1 Overview:
--------------
The focus of this lab was to show us the main components that need to be implemented for a functional Database
Management System (DBMS). By implementing the following components we should begin to develop a foundational
understanding of how a DBMS works internally.

The main components implemented in Lab1 were:
--------------------------------------------
- classes for fields, tuples, and tuple schemas. (e.g. - Tuple, TupleDesc)
- classes for applying predicates and conditions to tuples. (e.g. - SeqScan)
- method for accessing stored relations stored on the disk that iterates through tuples.
  (HeapFile, HeapPageId, RecordId, HeapPage)
- a buffer pool that will cache the active tuples and pages that are in memory. (BufferPool)

The classes for the fields, tuples, and schema provide the basic data structures needed for the database.
This is how we will store and organize the information within the database. We didn't implement it, but
the Field class represents the different data types. The Tuple class holds multiple fields as a single record.
TupleDesc was the class that defined the schema of the tuples (number and type of field in each). We also
implemented SeqScan which allows us to iterate over the tuples stored in a table.

We also implemented an access method utilizing heap files for storing relations on disk and enabling iteration
through tuples. We also created classes like HeapFile, which manages the storage of a relation as a collection
of pages, and HeapPage, which represents a single page and contains multiple tuples.

We also created a buffer pool that caches active tuples and pages in memory to improve performance. The BufferPool
class manages the memory allocation and handles reading, writing, and transaction management for pages. This
component is critical to the overall performance of the DBMS. It removes the need for disk access each time.

Design Decisions:
----------------
I guess this wasn't really our decision, but we are using concurrent Hashmap to support multiple threads. This would
allow concurrent access to the catalog and buffer pool. I'm sure that this decision is intentional since it ensures
thread safety, and it also eliminates race conditions or inconsistency issues when multiple threads are accessing
the database.

Suggested Test:
--------------
We could create a test to verify proper insert/delete of tuples inside HeapFile. It should insert the tuple, then
check that the tuple has been inserted. Then it deletes the tuple and verifies that it has been removed from the file.


- We did not make any changes to the API.
- At this point there are no incomplete elements (except those not required for Lab 1).
- No feedback on the assignment at this time.

